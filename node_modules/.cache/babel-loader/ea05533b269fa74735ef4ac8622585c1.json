{"ast":null,"code":"var _jsxFileName = \"/home/trident/js/corona/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\nimport { Line, Bar } from 'react-chartjs-2';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    deaths,\n    recovered\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  }, []);\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        labels: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        labels: 'Infected',\n        borderColor: '#3333ff',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }) : null;\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', \"Recovered\", \"Deaths\"],\n      datasets: [{\n        label: 'People',\n        backgroundColor: [\"rgab(0, 0, 255, 0.5)\", \"rgab(0, 255, 0, 0.5)\", \"rgab(255, 0, 0, 0.5)\"],\n        data: [confirmed, recovered, deaths]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 1\n    }\n  }, country ? barChart : lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/home/trident/js/corona/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","styles","Line","Bar","Chart","data","confirmed","deaths","recovered","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","borderColor","fill","backgroundColor","barChart","label","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;;AAEA,MAAMC,KAAK,GAAG,CAAE;AAACC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,GAAP;AAAyCC,EAAAA;AAAzC,CAAF,KAAyD;AACnE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAGJC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,QAAQ,GAAG,YAAY;AACzBD,MAAAA,YAAY,CAAC,MAAMX,cAAc,EAArB,CAAZ;AACH,KAFD;;AAIAY,IAAAA,QAAQ;AACX,GANQ,EAMN,EANM,CAAT;AAQA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBAEI,oBAAC,IAAD;AACA,IAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADN;AAEFC,MAAAA,QAAQ,EAAE,CAAC;AACPb,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEV,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADC;AAEPS,QAAAA,MAAM,EAAE,UAFD;AAGPI,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAKP;AACCf,QAAAA,IAAI,EAAEK,SAAS,CAACM,GAAV,CAAc,CAAC;AAAET,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADP;AAECQ,QAAAA,MAAM,EAAE,UAFT;AAGCI,QAAAA,WAAW,EAAE,SAHd;AAICE,QAAAA,eAAe,EAAE,sBAJlB;AAKCD,QAAAA,IAAI,EAAE;AALP,OALO;AAFR,KADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,GAkBU,IAnBd;AAuBA,QAAME,QAAQ,GACVhB,SAAS,gBAED,oBAAC,GAAD;AACI,IAAA,IAAI,EAAE;AACFS,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADN;AAEFG,MAAAA,QAAQ,EAAE,CAAC;AACPK,QAAAA,KAAK,EAAE,QADA;AAEPF,QAAAA,eAAe,EAAE,CAAC,sBAAD,EACC,sBADD,EAEC,sBAFD,CAFV;AAKPhB,QAAAA,IAAI,EAAE,CAACC,SAAD,EAAYE,SAAZ,EAAuBD,MAAvB;AALC,OAAD;AAFR,KADV;AAWI,IAAA,OAAO,EAAE;AACLiB,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADH;AAELC,MAAAA,KAAK,EAAE;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAiBE,QAAAA,IAAI,EAAG,oBAAmBlB,OAAQ;AAAnD;AAFF,KAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,GAkBD,IAnBZ;AAuBA,sBACA;AAAK,IAAA,SAAS,EAAER,MAAM,CAAC2B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,OAAO,GAAGa,QAAH,GAAcT,SAD1B,CADA;AAKC,CA/DD;;AAkEA,eAAeT,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\nimport { Line, Bar } from 'react-chartjs-2';\n\nconst Chart = ( {data: { confirmed, deaths, recovered }, country} ) => {\n    const [dailyData, setDailyData] = useState([]);\n \n\nuseEffect(() => {\n    const fetchAPI = async () => {\n        setDailyData(await fetchDailyData());\n    }\n\n    fetchAPI();\n}, []);\n\nconst lineChart = (\n    dailyData.length\n    ? (\n        <Line \n        data={{\n            labels: dailyData.map(({ date }) => date), \n            datasets: [{\n                data: dailyData.map(({ confirmed }) => confirmed),\n                labels: 'Infected',\n                borderColor: '#3333ff',\n                fill: true,\n            }, {\n                data: dailyData.map(({ deaths }) => deaths),\n                labels: 'Infected',\n                borderColor: '#3333ff',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n            }],\n        }}\n        />) : null\n);\n\n\nconst barChart = (\n    confirmed \n        ? (\n            <Bar \n                data={{\n                    labels: ['Infected', \"Recovered\", \"Deaths\",],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\"rgab(0, 0, 255, 0.5)\",\n                                          \"rgab(0, 255, 0, 0.5)\",\n                                          \"rgab(255, 0, 0, 0.5)\",],\n                        data: [confirmed, recovered, deaths]\n                    }]\n                }} \n                options={{\n                    legend: { display: false },\n                    title: { display: true, text: `Current State in ${country}` },\n                }}\n            /> \n        ) : null\n)\n\n\nreturn (\n<div className={styles.container}>\n    {country ? barChart : lineChart}\n</div>\n)\n}\n\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/trident/js/corona/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\nimport { Line, Bar } from 'react-chartjs-2';\n\nconst Chart = ({\n  data,\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fetchAPI();\n  });\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        labels: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        labels: 'Infected',\n        borderColor: '#3333ff',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }) : null;\n  const barChart = data.confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', \"Recovered\", \"Deaths\"],\n      datasets: [{\n        label: 'People',\n        backgroundColor: [\"rgab(0, 0, 255, 0.5)\", \"rgab(0, 255, 0, 0.5)\", \"rgab(255, 0, 0, 0.5)\"]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current State in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 1\n    }\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/home/trident/js/corona/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","styles","Line","Bar","Chart","data","country","dailyData","setDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","confirmed","borderColor","fill","deaths","backgroundColor","barChart","label","legend","display","title","text","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;;AAEA,MAAMC,KAAK,GAAG,CAAE;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAF,KAAuB;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAGJC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,QAAQ,GAAG,YAAY;AACzBD,MAAAA,YAAY,CAAC,MAAMR,cAAc,EAArB,CAAZ;AACH,KAFD;;AAIAS,IAAAA,QAAQ;AACX,GANQ,CAAT;AAQA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBAEI,oBAAC,IAAD;AACA,IAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADN;AAEFC,MAAAA,QAAQ,EAAE,CAAC;AACPV,QAAAA,IAAI,EAAEE,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEG,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADC;AAEPJ,QAAAA,MAAM,EAAE,UAFD;AAGPK,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAKP;AACCb,QAAAA,IAAI,EAAEE,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEM,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CADP;AAECP,QAAAA,MAAM,EAAE,UAFT;AAGCK,QAAAA,WAAW,EAAE,SAHd;AAICG,QAAAA,eAAe,EAAE,sBAJlB;AAKCF,QAAAA,IAAI,EAAE;AALP,OALO;AAFR,KADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,GAkBU,IAnBd;AAuBA,QAAMG,QAAQ,GACVhB,IAAI,CAACW,SAAL,gBAEQ,oBAAC,GAAD;AACI,IAAA,IAAI,EAAE;AACFJ,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADN;AAEFG,MAAAA,QAAQ,EAAE,CAAC;AACPO,QAAAA,KAAK,EAAE,QADA;AAEPF,QAAAA,eAAe,EAAE,CAAC,sBAAD,EACC,sBADD,EAEC,sBAFD;AAFV,OAAD;AAFR,KADV;AAUI,IAAA,OAAO,EAAE;AACLG,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADH;AAELC,MAAAA,KAAK,EAAE;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAiBE,QAAAA,IAAI,EAAG,oBAAmBpB,OAAQ;AAAnD;AAFF,KAVb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,GAiBQ,IAlBZ;AAsBA,sBACA;AAAK,IAAA,SAAS,EAAEL,MAAM,CAAC0B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKjB,SADL,CADA;AAKC,CA9DD;;AAiEA,eAAeN,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\nimport { Line, Bar } from 'react-chartjs-2';\n\nconst Chart = ( {data, country} ) => {\n    const [dailyData, setDailyData] = useState([]);\n \n\nuseEffect(() => {\n    const fetchAPI = async () => {\n        setDailyData(await fetchDailyData());\n    }\n\n    fetchAPI();\n});\n\nconst lineChart = (\n    dailyData.length\n    ? (\n        <Line \n        data={{\n            labels: dailyData.map(({ date }) => date), \n            datasets: [{\n                data: dailyData.map(({ confirmed }) => confirmed),\n                labels: 'Infected',\n                borderColor: '#3333ff',\n                fill: true,\n            }, {\n                data: dailyData.map(({ deaths }) => deaths),\n                labels: 'Infected',\n                borderColor: '#3333ff',\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                fill: true,\n            }],\n        }}\n        />) : null\n);\n\n\nconst barChart = (\n    data.confirmed \n        ? (\n            <Bar \n                data={{\n                    labels: ['Infected', \"Recovered\", \"Deaths\",],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\"rgab(0, 0, 255, 0.5)\",\n                                          \"rgab(0, 255, 0, 0.5)\",\n                                          \"rgab(255, 0, 0, 0.5)\",]\n                    }]\n                }} \n                options={{\n                    legend: { display: false },\n                    title: { display: true, text: `Current State in ${country}` },\n                }}\n            /> \n        ) : null\n)\n\n\nreturn (\n<div className={styles.container}>\n    {lineChart}\n</div>\n)\n}\n\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}